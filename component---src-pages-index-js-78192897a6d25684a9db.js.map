{"version":3,"sources":["webpack:///./src/components/BlogPosts.js","webpack:///./src/pages/index.js"],"names":["PostSummary","post","postDate","Date","date","Intl","DateTimeFormat","month","day","year","format","className","key","id","to","linkResolver","_meta","RichText","asText","title","length","firstTextSlice","body","find","slice","type","text","primary","limitedText","substring","lastIndexOf","firstParagraph","posts","map","node","query","BlogHomeHead","home","avatar","backgroundImage","image","url","data-wio-id","style","headline","description","data","doc","prismic","allBlog_homes","edges","pop","allPosts","BlogPosts"],"mappings":"6NAgCMA,EAAc,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAGjBC,EAAWC,eAAKF,EAAKG,MACzBF,EAAWA,EACT,IAAIG,KAAKC,eAAe,QAAS,CAC/BC,MAAO,QACPC,IAAK,UACLC,KAAM,YACLC,OAAOR,GACV,GAKF,OACE,yBAAKS,UAAU,eAAeC,IAAMX,EAAKY,IACvC,4BAEE,kBAAC,OAAD,CAAMC,GAAKC,uBAAad,EAAKe,QACc,IAAvCC,WAASC,OAAOjB,EAAKkB,OAAOC,OAAeH,WAASC,OAAOjB,EAAKkB,OAPrD,aAUjB,uBAAGR,UAAU,kBACX,8BAAQT,IAlDQ,SAAAD,GAGtB,IAAIoB,EAAiBpB,EAAKqB,KAAKC,MAAK,SAAAC,GAAK,MAAmB,SAAfA,EAAMC,QACnD,GAAsB,MAAlBJ,EAAwB,CAE1B,IACIK,EAAOT,WAASC,OAAOG,EAAeM,QAAQD,MAC9CE,EAAcF,EAAKG,UAAU,EAFf,KAIlB,OAAIH,EAAKN,OAJS,IAOd,2BAAKQ,EAAYC,UAAU,EAAGD,EAAYE,YAAY,MAAQ,OAIzD,2BAAKJ,GAId,OAAO,KAgCHK,CAAe9B,KAKR,cAAgB,IAAb+B,EAAY,EAAZA,MAChB,OAAIA,EAGF,yBAAKrB,UAAU,wBACZqB,EAAMC,KAAI,SAAChC,GACV,OAAO,kBAAC,EAAD,CAAaA,KAAOA,EAAKiC,KAAOtB,IAAMX,EAAKiC,KAAKlB,MAAMH,SALjD,MC1DPsB,EAAK,wrBA2CZC,EAAe,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChBC,EAAS,CAAEC,gBAAiB,OAASF,EAAKG,MAAMC,IAAK,KAC3D,OACE,yBAAK9B,UAAU,wBAAwB+B,cAAcL,EAAKrB,MAAMH,IAC9D,yBAAKF,UAAU,cAAcgC,MAAQL,IAErC,4BAAMrB,WAASC,OAAOmB,EAAKO,WAC3B,uBAAGjC,UAAU,oBAAqBM,WAASC,OAAOmB,EAAKQ,gBAK9C,sBAAe,IAAZC,EAAW,EAAXA,KAEVC,EAAMD,EAAKE,QAAQC,cAAcC,MAAM1B,MAAM,EAAE,GAAG2B,MAClDnB,EAAQc,EAAKE,QAAQI,SAASF,MAEpC,OAAIH,EAGF,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAcV,KAAOU,EAAIb,OACzB,kBAACmB,EAAD,CAAWrB,MAAQA,KALP","file":"component---src-pages-index-js-78192897a6d25684a9db.js","sourcesContent":["import React from 'react'\nimport { Link } from \"gatsby\"\nimport { RichText, Date } from 'prismic-reactjs'\nimport { linkResolver } from '../utils/linkResolver'\n\n// Function to retrieve a small preview of the post's text\nconst firstParagraph = (post => {\n  \n  // Find the first text slice of post's body\n  let firstTextSlice = post.body.find(slice => slice.type === 'text');\n  if (firstTextSlice != null) {\n    // Set the character limit for the text we'll show in the homepage\n    const textLimit = 300\n    let text = RichText.asText(firstTextSlice.primary.text)\n    let limitedText = text.substring(0, textLimit)\n\n    if (text.length > textLimit) {\n      // Cut only up to the last word and attach '...' for readability\n      return (\n        <p>{ limitedText.substring(0, limitedText.lastIndexOf(' ')) + '...' }</p>\n      );\n    } else {\n      // If it's shorter than the limit, just show it normally\n      return <p>{ text }</p>;\n    }\n  } else {\n    // If there are no slices of type 'text', return nothing\n    return null;\n  }\n})\n\n// A summary of the Blog Post\nconst PostSummary = ({ post }) => {\n  \n  // Store and format the blog post's publication date\n  let postDate = Date(post.date);\n  postDate = postDate ? \n    new Intl.DateTimeFormat('en-US', {\n      month: 'short', \n      day: '2-digit', \n      year: 'numeric'\n    }).format(postDate) :\n    '';\n\n  // Default title when post has no title set\n  const defaultTitle = \"Untitled\"\n  \n  return (\n    <div className=\"post-summary\" key={ post.id } >\n      <h2>\n        {/* We render a link to a particular post using the linkResolver for the url and its title */}\n        <Link to={ linkResolver(post._meta) }>\n          { RichText.asText(post.title).length !== 0 ? RichText.asText(post.title) : defaultTitle }\n        </Link>\n      </h2>\n      <p className=\"blog-post-meta\">\n        <time>{ postDate }</time>\n      </p>\n      {/* Renders a small preview of the post's text */}\n      { firstParagraph(post) }\n    </div>\n  );\n}\n\nexport default ({ posts }) => {\n  if(!posts) return null;\n  \n  return(\n    <div className=\"blog-posts container\">\n      {posts.map((post) => {\n        return <PostSummary post={ post.node } key={ post.node._meta.id }/>\n      })}\n    </div>\n  )\n}\n","import React from 'react'\nimport { RichText } from 'prismic-reactjs'\nimport { graphql } from 'gatsby';\nimport Layout from '../components/layouts'\nimport BlogPosts from '../components/BlogPosts'\n\n// Query for the Blog Home content in Prismic\nexport const query = graphql`\n{\n  prismic{\n    allBlog_homes(uid:null){\n      edges{\n        node{\n          _meta{\n            id\n            type\n          }\n          headline\n          description\n          image\n        }\n      }\n    }\n    allPosts(sortBy: date_DESC){\n      edges{\n        node{\n          _meta{\n            id\n            uid\n            type\n          }\n          title\n          date\n          body{\n            ... on PRISMIC_PostBodyText{\n              type\n              label\n              primary{\n                text\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\n// Using the queried Blog Home document data, we render the top section\nconst BlogHomeHead = ({ home }) => {  \n  const avatar = { backgroundImage: 'url(' + home.image.url +')' };\n  return (\n    <div className=\"home-header container\" data-wio-id={ home._meta.id }>\n      <div className=\"blog-avatar\" style={ avatar }>\n      </div>\n      <h1>{ RichText.asText(home.headline) }</h1>\n      <p className=\"blog-description\">{ RichText.asText(home.description) }</p>\n    </div>\n  );\n};\n\nexport default ({ data }) => {\n  // Define the Blog Home & Blog Post content returned from Prismic\n  const doc = data.prismic.allBlog_homes.edges.slice(0,1).pop();\n  const posts = data.prismic.allPosts.edges;\n\n  if(!doc) return null;\n\n  return(\n    <Layout>\n      <BlogHomeHead home={ doc.node } />\n      <BlogPosts posts={ posts }/>\n    </Layout>\n  )\n}\n"],"sourceRoot":""}